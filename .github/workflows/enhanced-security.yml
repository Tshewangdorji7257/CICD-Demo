# Comprehensive Security Pipeline - Snyk + SonarCloud Integration
name: Enhanced Security Pipeline

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  schedule:
    - cron: "0 2 * * 1" # Weekly scan on Monday at 2 AM

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'src/**'
            dependencies:
              - 'pom.xml'
              - '.snyk'
            docker:
              - 'dockerfile'
              - 'dockerrun.aws.json'

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven
      - name: Run Tests with Coverage
        run: mvn clean verify
      - name: Generate JaCoCo Report
        run: mvn jacoco:report
      - uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

  security-snyk:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always() && (needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule')
    strategy:
      fail-fast: false
      matrix:
        scan-type: [dependencies, code]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven
      
      - name: Build project for security scan
        run: mvn clean compile -DskipTests

      - name: Install Snyk CLI
        run: |
          echo "📦 Installing Snyk CLI..."
          npm install -g snyk
          snyk --version

      - name: Run Snyk Dependency Scan
        if: matrix.scan-type == 'dependencies'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "🔍 Running Snyk dependency scan..."
          snyk test --maven --severity-threshold=medium --sarif-file-output=snyk-dependencies.sarif || true

      - name: Run Snyk Code Security Scan (SAST)
        if: matrix.scan-type == 'code'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "🔍 Running Snyk code scan..."
          snyk code test --severity-threshold=high --sarif-file-output=snyk-code.sarif || true

      - name: Check SARIF file exists
        id: check-sarif
        run: |
          SARIF_FILE="snyk-${{ matrix.scan-type }}.sarif"
          if [ -f "$SARIF_FILE" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
            echo "✅ SARIF file found: $SARIF_FILE"
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "❌ SARIF file not found: $SARIF_FILE"
            ls -la *.sarif 2>/dev/null || echo "No SARIF files found"
          fi

      - name: Upload SARIF to GitHub Security
        if: steps.check-sarif.outputs.sarif-exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-${{ matrix.scan-type }}.sarif
          category: snyk-${{ matrix.scan-type }}

      - name: Upload Snyk Results as Artifact
        if: steps.check-sarif.outputs.sarif-exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: snyk-${{ matrix.scan-type }}-results
          path: snyk-${{ matrix.scan-type }}.sarif
          retention-days: 30

  security-sonarcloud:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always() && (needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for better analysis

      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and run tests for SonarCloud
        run: mvn clean verify

      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=Tshewangdorji7257_CICD-Demo \
            -Dsonar.organization=tshewangdorji7257 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.qualitygate.wait=true

  container-security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.docker == 'true' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven
      
      - name: Build application package
        run: mvn clean package -DskipTests
      
      - name: Build Docker image
        run: |
          docker build -t cicd-demo:${{ github.sha }} .
          docker tag cicd-demo:${{ github.sha }} cicd-demo:latest
      
      - name: Run Snyk Container Scan
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: cicd-demo:latest
          args: >
            --severity-threshold=high
            --file=dockerfile
            --exclude-base-image-vulns
            --sarif-file-output=snyk-container.sarif
      
      - name: Upload Container Security Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-container.sarif
          category: snyk-container

  monitor:
    runs-on: ubuntu-latest
    needs: [test, security-snyk, security-sonarcloud]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven
      - name: Build for monitoring
        run: mvn clean compile -DskipTests
      - name: Install Snyk CLI for monitoring
        run: |
          echo "📦 Installing Snyk CLI for monitoring..."
          npm install -g snyk
          snyk --version
      - name: Monitor project with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "📊 Monitoring project dependencies with Snyk..."
          snyk monitor --maven \
            --project-name="${{ github.repository }}-production" \
            --target-reference="${{ github.ref }}" \
            --remote-repo-url="${{ github.server_url }}/${{ github.repository }}.git" || true

  security-report:
    runs-on: ubuntu-latest
    needs: [security-snyk, security-sonarcloud, container-security]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## � Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Snyk Dependencies | ${{ needs.security-snyk.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarCloud SAST | ${{ needs.security-sonarcloud.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security pipeline completed**" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY
